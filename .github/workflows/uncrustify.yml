name: Uncrustify the source code

on:
  issue_comment:
    types: [created]

env:
  bashPass: \033[32;1mPASSED -
  bashInfo: \033[33;1mINFO -
  bashFail: \033[31;1mFAILED -
  bashEnd:  \033[0m

jobs:
  Uncrustify:
    name: Run_Uncrustify
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/bot run uncrustify' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - env:
          stepName: Install Utils
        run: |
          # ${{ env.stepName }}
          echo -e "::group::${{ env.bashInfo }} ${{ env.stepName }} ${{ env.bashEnd }}"
          sudo apt-get update && sudo apt-get --assume-yes install software-properties-common curl jq sed
          sudo add-apt-repository ppa:git-core/ppa
          sudo apt-get update && sudo apt-get --assume-yes install git
          git --version
          echo -e "::endgroup::"
          echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }}"

      - name: get pullrequest url
        run: |
          echo ${{ github.event.issue.pull_request.url }}

      - name: get upstream repo
        id: upstreamrepo
        run: |
          echo "RemoteRepo=$(curl -H "Accept: application/vnd.github.sailor-v-preview+json" --url ${{ github.event.issue.pull_request.url }} | jq '.head.repo.full_name' | sed 's/\"//g')" >> $GITHUB_OUTPUT

      - name: get upstream branch
        id: upstreambranch
        run: |
          echo "branchname=$(curl -H "Accept: application/vnd.github.sailor-v-preview+json" --url ${{ github.event.issue.pull_request.url }} | jq '.head.ref' | sed 's/\"//g')" >> $GITHUB_OUTPUT

      - name: echo upstream repo:branch
        run: |
          echo ${{ steps.upstreamrepo.outputs.RemoteRepo }}:${{ steps.upstreambranch.outputs.branchname }}

      - name: Checkout upstream repo
        uses: actions/checkout@v3
        with:
           repository: ${{ steps.upstreamrepo.outputs.RemoteRepo }}
           ref: ${{ steps.upstreambranch.outputs.branchname }}

      - name: Check Formatting
        uses: FreeRTOS/CI-CD-Github-Actions/formatting@main
        continue-on-error: true
        id: check-formatting
        with:
          path: ./

      - env:
          stepName: Apply Formatting Patch
        shell: bash
        if: steps.check-formatting.outcome == 'failure'
        run: |
          # ${{ env.stepName }}
          echo -e  "::group::${{ env.bashInfo }} ${{ env.stepName }} ${{ env.bashEnd }}"
          # git apply formattingChanges.patch
          git config --global --add safe.directory '*'
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git commit -am "Uncrustify: triggered by comment."
          echo "::endgroup::"
          git push
          echo -e "${{ env.bashPass }} ${{ env.stepName }}. Don't forget to run 'git pull'! ${{ env.bashEnd }}"
